#include "FractalBuilder.h"#include <cmath>#include "opencv/cv.h"#include "opencv/highgui.h"#include <cstdio>#define CLAMP(x) ( ((x) > 255.0) ? 255.0 : ( ((x) < 0.0) ? 0.0 : x ) )using namespace cv;FractalBuilder::FractalBuilder() : S(){	width = 700;	height = 700;	destination = S.toString() + ".png";}FractalBuilder::FractalBuilder(int width, int height) : S("BBBBBBAAAAAA"){	this->width = width;	this->height = height;	this->destination = S.toString() + ".png";}FractalBuilder::FractalBuilder(int width, int height, string destination) : S(){	this->width = width;	this->height = height;	this->destination = destination;}void FractalBuilder::build(){	Mat fractal(height, width, CV_8UC3);		const double left = 0.0;	const double right = 4.0;	const double aStep = (right - left) / height;	const double bStep = (right - left) / width;		for (double a = left; a <= right; a += aStep) {		for (double b = left; b <= right; b += bStep) {			double lambda = lyapunovExponent(900, a, b, S);			int x = (int)(a*height/(right-left));			int y = (int)(b*width/(right-left));			Vec3b v = fractal.at<Vec3b>(x, y);			v[0] = fabs(lambda)*255.0;			v[1] = fabs(lambda)*255.0;			v[2] = fabs(lambda)*255.0;			fractal.at<Vec3b>(x, y) = v;		}	}		imwrite(destination, fractal);}double FractalBuilder::lyapunovExponent		(int N, double a, double b, CycledLetterSequence S) {	double sum = 0.0;	double xn = 0.5;	for (int i = 1; i <= N; i++) {		char nextChar = S.charAtIndex(i);		double rn = (nextChar == 'A') ? a : b;		xn = rn * xn * (1.0 - xn);				sum += log(fabs(rn * (1.0 - 2.0 * xn)));	}	return sum / N;}